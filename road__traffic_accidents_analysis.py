# -*- coding: utf-8 -*-
"""Road _Traffic_Accidents_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UyQsPwapX2AxI7nUuKGRalC-IlI0uN2s

# Import necessary libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report

"""# 1. Load and Merge Datasets"""

# Load datasets
cleaned_df = pd.read_csv('cleaned.csv')
rta_df = pd.read_csv('RTA Dataset.csv')

merged_df.head()

merged_df.shape

merged_df.info(10)

merged_df.describe()

# Merge datasets on common columns
merged_df = pd.merge(cleaned_df, rta_df, on=[
    'Age_band_of_driver', 'Sex_of_driver', 'Educational_level',
    'Vehicle_driver_relation', 'Driving_experience',
    'Vehicle_movement', 'Pedestrian_movement', 'Cause_of_accident'
], how='inner')

# Drop duplicates
merged_df = merged_df.drop_duplicates()

"""# 2. Data Cleaning"""

# Drop columns with excessive missing values
merged_df = merged_df.drop(columns=[
    'Service_year_of_vehicle', 'Defect_of_vehicle',
    'Work_of_casuality', 'Fitness_of_casuality'
])

# Fill missing values in categorical columns using mode
for col in ['Type_of_vehicle', 'Owner_of_vehicle', 'Area_accident_occured',
            'Lanes_or_Medians_y', 'Road_allignment', 'Types_of_Junction_y',
            'Road_surface_type_y', 'Type_of_collision_y']:
    merged_df[col].fillna(merged_df[col].mode()[0], inplace=True)

# Drop any remaining rows with missing values
merged_df = merged_df.dropna()

plt.figure(figsize=(8, 3))
plt.subplot(1, 2, 1)
merged_df['Age_band_of_driver'].value_counts().sort_index().plot(kind='bar', color='skyblue')
plt.title('Age Band of Driver')
plt.xlabel('Age Band')
plt.ylabel('Count')

#Age_band_of_casualty

plt.subplot(1, 2, 2)
merged_df['Age_band_of_casualty'].value_counts().sort_index().plot(kind='bar', color='salmon')
plt.title('Age Band of Casualty')
plt.xlabel('Age Band')
plt.ylabel('Count')

plt.tight_layout()
plt.show()

merged_df.hist(layout=(1,4), figsize=(25,3))
plt.show()

"""# 3. Exploratory Data Analysis (EDA)"""

sns.set(style="whitegrid")

# Distribution of Accident Severity
plt.figure(figsize=(6, 4))
sns.countplot(data=merged_df, x='Accident_severity_y', palette='viridis')
plt.title('Distribution of Accident Severity')
plt.show()

# Correlation heatmap
plt.figure(figsize=(7, 5))
sns.heatmap(merged_df.select_dtypes(include='number').corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Pie Chart for Accident Severity
plt.figure(figsize=(6, 4))
plt.pie(x=merged_df['Accident_severity_y'].value_counts().values,
        labels=merged_df['Accident_severity_y'].value_counts().index,
        autopct='%2.2f%%')
plt.title('Accident Severity Distribution')
plt.show()

"""# 4. Decision Tree Model - Accident Severity"""

# Encode categorical features
label_encoders = {}
df_encoded = merged_df.copy()

for col in df_encoded.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df_encoded[col] = le.fit_transform(df_encoded[col])
    label_encoders[col] = le

# Define features and target
X = df_encoded.drop(columns=['Accident_severity_x', 'Accident_severity_y'])
y = df_encoded['Accident_severity_x']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Decision Tree Classifier
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

# Predictions and performance metrics
y_pred = dt_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

"""# 5. Decision Tree Model - Predicting Time"""

# Optional: Predict time of accidents (if applicable)
X = df_encoded.drop(columns=['Time'])
y = df_encoded['Time']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
clf = DecisionTreeClassifier(random_state=42, max_depth=5, max_leaf_nodes=10)
clf.fit(X_train, y_train)

# Predictions and visualization
y_pred = clf.predict(X_test)
print(f'Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%')
print(classification_report(y_test, y_pred))

plt.figure(figsize=(17, 8))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=y.unique().astype(str),
          rounded=True, fontsize=9, precision=4)
plt.title("Decision Tree Visualization")
plt.show()

"""# 6. Save Processed Dataset"""

df_encoded['Decision_Tree_Prediction'] = dt_model.predict(df_encoded.drop(columns=['Accident_severity_x', 'Accident_severity_y']))
df_encoded.to_csv('road_traffic_accidents_analysis.csv', index=False)

"""# 7. Visualization: Precision and Recall"""

# Data for the chart
categories = ['Slight Injury (2)', 'Serious Injury (1)', 'Fatal Injury (0)']
precision = [95, 72, 78]
recall = [95, 75, 80]

plt.figure(figsize=(6, 4))
bar_width = 0.35
index = range(len(categories))

# Bar chart
plt.bar(index, precision, bar_width, label='Precision (%)', color='skyblue')
plt.bar([i + bar_width for i in index], recall, bar_width, label='Recall (%)', color='salmon')
plt.xlabel('Accident Severity', fontsize=12)
plt.ylabel('Percentage (%)', fontsize=12)
plt.title('Precision and Recall by Accident Severity', fontsize=14)
plt.xticks([i + bar_width / 2 for i in index], categories)
plt.legend()
plt.tight_layout()
plt.show()

"""# 8. Visualization: Accidents by Hour"""

df = pd.read_csv('/content/RTA Dataset.csv')  # Replace with your dataset path
df['Time'] = pd.to_datetime(df['Time'], errors='coerce').dt.hour

# Count accidents by hour
accidents_by_hour = df['Time'].value_counts().sort_index()

# Line chart
plt.figure(figsize=(8, 4))
sns.lineplot(x=accidents_by_hour.index, y=accidents_by_hour.values, marker='o', color='crimson')
plt.xticks(range(0, 24))
plt.title('Number of Road Accidents by Hour of the Day', fontsize=16)
plt.xlabel('Hour of the Day', fontsize=12)
plt.ylabel('Number of Accidents', fontsize=12)
plt.grid(True)
plt.show()

"""#Conclusion
Road traffic accidents occur more frequently during specific hours, with slight injuries being the most common. The Decision Tree model achieved 91.58% accuracy, effectively predicting accident severity. Visual analysis highlighted key patterns by age, time, and severity, providing actionable insights for improving road safety.
"""